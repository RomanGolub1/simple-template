/*! normalize-scss | MIT/GPLv2 License | bit.ly/normalize-scss */
/* Document
   ========================================================================== */
/**
 * 1. Correct the line height in all browsers.
 * 2. Prevent adjustments of font size after orientation changes in
 *    IE on Windows Phone and in iOS.
 */
html {
  line-height: 1.15;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
}

/* Sections
   ========================================================================== */
/**
 * Remove the margin in all browsers (opinionated).
 */
body {
  margin: 0;
}

/**
 * Add the correct display in IE 9-.
 */
article,
aside,
footer,
header,
nav,
section {
  display: block;
}

/**
 * Correct the font size and margin on `h1` elements within `section` and
 * `article` contexts in Chrome, Firefox, and Safari.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/* Grouping content
   ========================================================================== */
/**
 * Add the correct display in IE 9-.
 */
figcaption,
figure {
  display: block;
}

/**
 * Add the correct margin in IE 8.
 */
figure {
  margin: 1em 40px;
}

/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Show the overflow in Edge and IE.
 */
hr {
  box-sizing: content-box;
  /* 1 */
  height: 0;
  /* 1 */
  overflow: visible;
  /* 2 */
}

/**
 * Add the correct display in IE.
 */
main {
  display: block;
}

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
pre {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */
}

/* Links
   ========================================================================== */
/**
 * 1. Remove the gray background on active links in IE 10.
 * 2. Remove gaps in links underline in iOS 8+ and Safari 8+.
 */
a {
  background-color: transparent;
  /* 1 */
  -webkit-text-decoration-skip: objects;
  /* 2 */
}

/* Text-level semantics
   ========================================================================== */
/**
 * 1. Remove the bottom border in Chrome 57- and Firefox 39-.
 * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
 */
abbr[title] {
  border-bottom: none;
  /* 1 */
  text-decoration: underline;
  /* 2 */
  text-decoration: underline dotted;
  /* 2 */
}

/**
 * Prevent the duplicate application of `bolder` by the next rule in Safari 6.
 */
b,
strong {
  font-weight: inherit;
}

/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */
b,
strong {
  font-weight: bolder;
}

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
code,
kbd,
samp {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */
}

/**
 * Add the correct font style in Android 4.3-.
 */
dfn {
  font-style: italic;
}

/**
 * Add the correct background and color in IE 9-.
 */
mark {
  background-color: #ff0;
  color: #000;
}

/**
 * Add the correct font size in all browsers.
 */
small {
  font-size: 80%;
}

/**
 * Prevent `sub` and `sup` elements from affecting the line height in
 * all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}

/* Embedded content
   ========================================================================== */
/**
 * Add the correct display in IE 9-.
 */
audio,
video {
  display: inline-block;
}

/**
 * Add the correct display in iOS 4-7.
 */
audio:not([controls]) {
  display: none;
  height: 0;
}

/**
 * Remove the border on images inside links in IE 10-.
 */
img {
  border-style: none;
}

/**
 * Hide the overflow in IE.
 */
svg:not(:root) {
  overflow: hidden;
}

/* Forms
   ========================================================================== */
/**
 * 1. Change the font styles in all browsers (opinionated).
 * 2. Remove the margin in Firefox and Safari.
 */
button,
input,
optgroup,
select,
textarea {
  font-family: sans-serif;
  /* 1 */
  font-size: 100%;
  /* 1 */
  line-height: 1.15;
  /* 1 */
  margin: 0;
  /* 2 */
}

/**
 * Show the overflow in IE.
 */
button {
  overflow: visible;
}

/**
 * Remove the inheritance of text transform in Edge, Firefox, and IE.
 * 1. Remove the inheritance of text transform in Firefox.
 */
button,
select {
  /* 1 */
  text-transform: none;
}

/**
 * 1. Prevent a WebKit bug where (2) destroys native `audio` and `video`
 *    controls in Android 4.
 * 2. Correct the inability to style clickable types in iOS and Safari.
 */
button,
html [type=button],
[type=reset],
[type=submit] {
  -webkit-appearance: button;
  /* 2 */
}

button,
[type=button],
[type=reset],
[type=submit] {
  /**
   * Remove the inner border and padding in Firefox.
   */
  /**
   * Restore the focus styles unset by the previous rule.
   */
}
button::-moz-focus-inner,
[type=button]::-moz-focus-inner,
[type=reset]::-moz-focus-inner,
[type=submit]::-moz-focus-inner {
  border-style: none;
  padding: 0;
}
button:-moz-focusring,
[type=button]:-moz-focusring,
[type=reset]:-moz-focusring,
[type=submit]:-moz-focusring {
  outline: 1px dotted ButtonText;
}

/**
 * Show the overflow in Edge.
 */
input {
  overflow: visible;
}

/**
 * 1. Add the correct box sizing in IE 10-.
 * 2. Remove the padding in IE 10-.
 */
[type=checkbox],
[type=radio] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
 * Correct the cursor style of increment and decrement buttons in Chrome.
 */
[type=number]::-webkit-inner-spin-button,
[type=number]::-webkit-outer-spin-button {
  height: auto;
}

/**
 * 1. Correct the odd appearance in Chrome and Safari.
 * 2. Correct the outline style in Safari.
 */
[type=search] {
  -webkit-appearance: textfield;
  /* 1 */
  outline-offset: -2px;
  /* 2 */
  /**
   * Remove the inner padding and cancel buttons in Chrome and Safari on macOS.
   */
}
[type=search]::-webkit-search-cancel-button, [type=search]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
 * 1. Correct the inability to style clickable types in iOS and Safari.
 * 2. Change font properties to `inherit` in Safari.
 */
::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */
}

/**
 * Correct the padding in Firefox.
 */
fieldset {
  padding: 0.35em 0.75em 0.625em;
}

/**
 * 1. Correct the text wrapping in Edge and IE.
 * 2. Correct the color inheritance from `fieldset` elements in IE.
 * 3. Remove the padding so developers are not caught out when they zero out
 *    `fieldset` elements in all browsers.
 */
legend {
  box-sizing: border-box;
  /* 1 */
  display: table;
  /* 1 */
  max-width: 100%;
  /* 1 */
  padding: 0;
  /* 3 */
  color: inherit;
  /* 2 */
  white-space: normal;
  /* 1 */
}

/**
 * 1. Add the correct display in IE 9-.
 * 2. Add the correct vertical alignment in Chrome, Firefox, and Opera.
 */
progress {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */
}

/**
 * Remove the default vertical scrollbar in IE.
 */
textarea {
  overflow: auto;
}

/* Interactive
   ========================================================================== */
/*
 * Add the correct display in Edge, IE, and Firefox.
 */
details {
  display: block;
}

/*
 * Add the correct display in all browsers.
 */
summary {
  display: list-item;
}

/*
 * Add the correct display in IE 9-.
 */
menu {
  display: block;
}

/* Scripting
   ========================================================================== */
/**
 * Add the correct display in IE 9-.
 */
canvas {
  display: inline-block;
}

/**
 * Add the correct display in IE.
 */
template {
  display: none;
}

/* Hidden
   ========================================================================== */
/**
 * Add the correct display in IE 10-.
 */
[hidden] {
  display: none;
}

.bottom-sidebar__right, .bottom-sidebar__left {
  background: linear-gradient(to bottom, #ffffff 0%, #f5f5f5 50%, #eeeeee 100%);
}

* {
  box-sizing: border-box;
}

html {
  font-family: verdana, arial, sans-serif;
  font-size: 12px;
}

body {
  display: flex;
  align-items: center;
  flex-direction: column;
  background: url("../img/background.jpg");
  background-color: #3a3a3a;
  background-position: 50% 0;
}

h2 {
  margin: 10px 0;
  color: #0b81be;
  font-size: 2rem;
  font-weight: normal;
}

a {
  text-decoration: none;
}

h3 {
  font-size: 2rem;
  font-weight: normal;
}

p {
  color: #858585;
  line-height: 1.75;
}

i {
  color: #424242;
}

li {
  line-height: 1.5;
}

.wrapper {
  flex-grow: 1;
  max-width: 850px;
  padding: 0 15px;
}

.header {
  display: flex;
  align-items: center;
  flex: 1 0 100%;
  margin: 34px 0;
}
.header-logo {
  flex: 0 0 200px;
}

.menu {
  position: relative;
  z-index: 9;
  display: flex;
  justify-content: flex-end;
}
.menu__list {
  display: flex;
  align-items: center;
  min-height: 40px;
  margin: 0;
  padding: 0;
  list-style: none;
}
.menu__list.activeF {
  z-index: 1;
  visibility: visible;
  opacity: 1;
}
.menu__list.activeF .menu__list-item {
  width: 100%;
  margin: 0;
  text-align: center;
}
.menu__list.activeF .menu__list-item a {
  width: 100%;
  padding: 15px;
  border-radius: 0;
}
.menu__list-item {
  display: block;
  margin-left: 7px;
}
.menu__list-item a {
  display: block;
  padding: 12px 15px;
  text-decoration: none;
  text-transform: uppercase;
  color: #efefef;
  border-radius: 15px;
}
.menu__list-item:hover:not(.active) a {
  background-color: rgba(255, 255, 255, 0.2);
}
.menu__list-item.active a {
  background: linear-gradient(to bottom, #0f8bbe 0%, #2989d8 50%, #207cca 51%, #0eb7fe 100%);
}

.menu__btn {
  display: flex;
  align-items: center;
  flex-direction: column;
  justify-content: center;
  width: 50px;
  height: 50px;
  cursor: pointer;
  background-color: rgba(0, 0, 0, 0.25);
}
.menu__btn-row {
  position: relative;
  width: 60%;
  height: 2px;
  margin: 2px 0;
  transition: all 0.5s;
  background-color: #ffffff;
}
.menu__btn.active .menu-btn__row:first-of-type {
  top: 6px;
  transform: rotate(-135deg);
}
.menu__btn.active .menu-btn__row:last-of-type {
  top: -6px;
  transform: rotate(-225deg);
}
.menu__btn.active .menu-btn__row:nth-of-type(2) {
  opacity: 0;
}

.container {
  display: flex;
  flex-wrap: wrap;
  margin-bottom: 50px;
  padding: 15px;
  background: rgba(255, 255, 255, 0.1);
}

.main {
  background-color: #efefef;
}
.main p {
  text-align: justify;
}

.carousel {
  position: relative;
  order: 1;
  width: 100%;
  padding: 15px;
  background-color: #efefef;
}

.carousel-slides {
  position: relative;
}

.carousel-slide {
  position: absolute;
  top: 0;
  display: flex;
  transition: opacity 0.5s;
  opacity: 0;
  border: 7px solid #ffffff;
  background-image: url(../img/carousel-item-bg.png);
  background-position: 50% 50%;
  background-size: cover;
  box-shadow: 0 0 1px #dddddd;
}
.carousel-slide.active {
  position: relative;
  z-index: 1;
  opacity: 1;
}

.carousel-slide__image {
  display: flex;
  align-items: center;
  padding: 15px;
}
.carousel-slide__image img {
  max-width: 100%;
}
.carousel-slide__text h3 {
  text-transform: uppercase;
  color: #ffffff;
}
.carousel-slide__text p {
  overflow: hidden;
  max-height: 70px;
  color: #ffffff;
  font-size: 1rem;
  line-height: 1.5;
}

.carousel-control {
  position: absolute;
  z-index: 2;
  top: 50%;
}
.carousel-control img {
  margin-top: -15px;
}
.carousel-control.prev {
  left: 3px;
}
.carousel-control.next {
  right: 3px;
  transform: scale(-1, 1);
}

.left-sidebar {
  position: relative;
  background-color: #efefef;
}
.left-sidebar ul {
  padding-left: 20px;
}
.left-sidebar li {
  position: relative;
  padding: 7.5px;
  list-style: none;
  color: #858585;
  font-style: italic;
}
.left-sidebar li::before {
  position: absolute;
  margin-left: -15px;
  content: url("../img/main-list-arrow.png");
}
.left-sidebar li span {
  position: relative;
}
.left-sidebar li span::after {
  position: relative;
  right: 0;
  bottom: -10px;
  left: 0;
  height: 1px;
  content: "";
  background-color: #dddddd;
}

.bottom-sidebar {
  position: relative;
  display: flex;
  flex: 1 0 100%;
  flex-wrap: wrap;
  order: 4;
  padding: 15px;
  background-color: #efefef;
}
.bottom-sidebar::before {
  position: absolute;
  top: 14px;
  right: 14px;
  bottom: 14px;
  left: 14px;
  content: "";
  background-color: #dddddd;
}
.bottom-sidebar p {
  margin: 0;
  color: #858585;
  line-height: 1.5em;
}
.bottom-sidebar img {
  padding: 0 15px 15px 0;
}

.bottom-sidebar__left {
  position: relative;
  display: flex;
  align-items: flex-start;
  border: 5px solid #ffffff;
}

.bottom-sidebar__right {
  position: relative;
  display: flex;
  align-items: flex-start;
  border: 5px solid #ffffff;
  background: linear-gradient(to bottom, #ffffff 0%, #f5f5f5 50%, #eeeeee 100%);
}

.footer {
  display: flex;
  justify-content: center;
  width: 100%;
  background-color: rgba(0, 0, 0, 0.4);
}
.footer .wrapper {
  display: flex;
  margin-top: 37px;
}
.footer .menu__btn {
  display: none;
}
.footer .menu__list-item {
  font-size: 0.9rem;
}

.footer-logo {
  margin: 15px;
}

.twitter {
  display: flex;
  flex-wrap: wrap;
}
.twitter__image {
  flex: 0 0 55px;
}
.twitter__description {
  flex: 1 0 100px;
}
.twitter__description-title {
  display: block;
  color: #ffffff;
  font-size: 2rem;
}
.twitter__description-slogan {
  color: #727272;
}
.twitter__post {
  position: relative;
  flex: 1 0 calc(100% - 67px);
  padding: 20px;
  border-radius: 10px;
  background: rgba(0, 0, 0, 0.4);
}
.twitter__post::before {
  position: absolute;
  top: -19px;
  left: 0;
  content: url("../img/twitter-speech-bubble.png");
}
.twitter__post-text {
  color: #858585;
  line-height: 18px;
}
.twitter__post-date {
  color: #0b81be;
  font-size: 0.83rem;
  font-style: italic;
}

.copyright {
  color: #ffffff;
}

@media (min-width: 577px) {
  .twitter__post {
    margin: 12px 30px 30px 37px;
  }
}

@media (min-width: 769px) {
  .menu {
    flex: 1 0 200px;
  }
  .main {
    flex: 1 0 calc(100% - 300px);
    order: 3;
    padding: 0 20px 15px 15px;
  }
  .carousel-slide__text {
    flex-grow: 1;
    padding: 15px 30px 15px 15px;
  }
  .carousel-slide__text h3 {
    flex-grow: 1;
    margin: 15px 0;
  }
  .carousel-slide__text p {
    flex-grow: 1;
    margin-bottom: 15px;
    text-align: justify;
  }
  .left-sidebar {
    flex: 0 0 300px;
    order: 2;
    padding: 0 15px 15px 20px;
  }
  .left-sidebar::after {
    position: absolute;
    top: 15px;
    right: 0;
    height: 90%;
    content: "";
    border-right: 1px solid #dddddd;
  }
  .bottom-sidebar__left {
    flex: 1 0 50%;
    padding: 20px 15px 25px;
    border-right: none;
  }
  .bottom-sidebar__left::after {
    position: absolute;
    top: 0;
    right: 0;
    height: 100%;
    content: "";
    border-right: 1px solid #dddddd;
  }
  .bottom-sidebar__right {
    flex: 1 0 50%;
    padding: 20px 15px 25px;
    border-left: none;
  }
  .footer-logo {
    text-align: right;
  }
}

@media (min-width: 851px) {
  .menu__btn {
    display: none;
  }
  .carousel-slide__image {
    flex: 0 0 250px;
  }
  .copyright {
    margin: 57px 15px 15px 15px;
    text-align: right;
  }
}

@media (max-width: 850px) {
  .menu__list {
    position: absolute;
    z-index: -999;
    top: 100%;
    right: -15px;
    visibility: hidden;
    flex-direction: column;
    width: 100vw;
    transition: opacity 0.5s;
    opacity: 0;
    background-color: rgba(0, 0, 0, 0.8);
  }
  .menu__btn {
    display: flex;
  }
  .footer .menu__list {
    top: initial;
    bottom: 100%;
  }
}

@media (max-width: 850px) and (min-width: 769px) {
  .carousel-slide__image {
    flex: 0 0 220px;
  }
  .footer-left {
    flex: 0 0 60%;
  }
  .footer-right {
    flex: 0 0 40%;
  }
  .copyright {
    margin: 75px 15px 15px 15px;
    text-align: right;
  }
}

@media (max-width: 768px) {
  .menu {
    flex: 1 0 50px;
  }
  .main {
    flex: 1 0 100%;
    order: 2;
    padding: 20px;
  }
  .carousel-slide {
    flex-wrap: wrap;
  }
  .carousel-slide__image {
    flex: 1 0 100%;
    justify-content: center;
  }
  .carousel-slide__text {
    flex: 1 0 100%;
    padding: 0 15px 15px 15px;
  }
  .carousel-slide__text h3 {
    overflow: hidden;
    flex: 1 0 100%;
    max-width: calc(100vw - 135px);
    margin: 0 0 15px 0;
    text-align: center;
    white-space: nowrap;
    text-overflow: ellipsis;
  }
  .carousel-slide__text p {
    margin: 0 0 15px 0;
    margin-bottom: 0;
    text-align: center;
  }
  .left-sidebar {
    flex: 1 0 100%;
    order: 3;
    padding: 0 20px 20px 20px;
  }
  .bottom-sidebar__left {
    flex: 1 0 100%;
    padding: 15px;
  }
  .bottom-sidebar__right {
    flex: 1 0 100%;
    padding: 15px;
  }
  .bottom-sidebar__right p {
    order: 1;
  }
  .bottom-sidebar__right img {
    order: 2;
    padding: 0 0 15px 15px;
  }
  .footer-left {
    flex: 1 0 100%;
  }
  .footer-right {
    flex: 1 0 100%;
  }
  .footer .wrapper {
    flex-wrap: wrap;
  }
  .footer-logo {
    text-align: center;
  }
  .copyright {
    margin: 30px 15px 15px 15px;
    text-align: center;
  }
}

@media (max-width: 576px) {
  .footer .menu {
    justify-content: center;
  }
  .twitter__post {
    margin: 12px 0 30px 37px;
  }
}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */